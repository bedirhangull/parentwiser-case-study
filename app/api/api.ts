/* tslint:disable */
/* eslint-disable */
/**
 * Simple Crud Api For Case Studies
 *  ## Endpoints are protected by Basic Authentication    ###  Credentials     * **Username:** demo * **Password:** demo  [Figma file link](/static/Crud-Operations.fig)  #    > **If you prefer _ReDoc:_** [Redoc Documentation](/redoc) 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DeleteUserResponseModel
 */
export interface DeleteUserResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof DeleteUserResponseModel
     */
    'is_successful': boolean;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface UserModel
 */
export interface UserModel {
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof UserModel
     */
    'age': number;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'hometown': string;
}
/**
 * 
 * @export
 * @interface UserResponseModel
 */
export interface UserResponseModel {
    /**
     * 
     * @type {string}
     * @memberof UserResponseModel
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseModel
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof UserResponseModel
     */
    'age': number;
    /**
     * 
     * @type {string}
     * @memberof UserResponseModel
     */
    'hometown': string;
}
/**
 * 
 * @export
 * @interface UserUpdateModel
 */
export interface UserUpdateModel {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateModel
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof UserUpdateModel
     */
    'age': number;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateModel
     */
    'hometown': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * SimpleCrudApi - axios parameter creator
 * @export
 */
export const SimpleCrudApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create User
         * @param {UserModel} userModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsersPost: async (userModel: UserModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userModel' is not null or undefined
            assertParamExists('createUserUsersPost', 'userModel', userModel)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBasic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User
         * @param {string} userKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsersUserKeyDelete: async (userKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userKey' is not null or undefined
            assertParamExists('deleteUserUsersUserKeyDelete', 'userKey', userKey)
            const localVarPath = `/users/{user_key}`
                .replace(`{${"user_key"}}`, encodeURIComponent(String(userKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBasic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User
         * @param {string} userKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsersUserKeyGet: async (userKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userKey' is not null or undefined
            assertParamExists('getUserUsersUserKeyGet', 'userKey', userKey)
            const localVarPath = `/users/{user_key}`
                .replace(`{${"user_key"}}`, encodeURIComponent(String(userKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBasic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersUsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBasic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User
         * @param {string} userKey 
         * @param {UserUpdateModel} userUpdateModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsersUserKeyPatch: async (userKey: string, userUpdateModel: UserUpdateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userKey' is not null or undefined
            assertParamExists('updateUserUsersUserKeyPatch', 'userKey', userKey)
            // verify required parameter 'userUpdateModel' is not null or undefined
            assertParamExists('updateUserUsersUserKeyPatch', 'userUpdateModel', userUpdateModel)
            const localVarPath = `/users/{user_key}`
                .replace(`{${"user_key"}}`, encodeURIComponent(String(userKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBasic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SimpleCrudApi - functional programming interface
 * @export
 */
export const SimpleCrudApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SimpleCrudApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {UserModel} userModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsersPost(userModel: UserModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserUsersPost(userModel, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SimpleCrudApi.createUserUsersPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete User
         * @param {string} userKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserUsersUserKeyDelete(userKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteUserResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserUsersUserKeyDelete(userKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SimpleCrudApi.deleteUserUsersUserKeyDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get User
         * @param {string} userKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsersUserKeyGet(userKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserUsersUserKeyGet(userKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SimpleCrudApi.getUserUsersUserKeyGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsersUsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponseModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsersUsersGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SimpleCrudApi.listUsersUsersGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update User
         * @param {string} userKey 
         * @param {UserUpdateModel} userUpdateModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserUsersUserKeyPatch(userKey: string, userUpdateModel: UserUpdateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserUsersUserKeyPatch(userKey, userUpdateModel, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SimpleCrudApi.updateUserUsersUserKeyPatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SimpleCrudApi - factory interface
 * @export
 */
export const SimpleCrudApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SimpleCrudApiFp(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {UserModel} userModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsersPost(userModel: UserModel, options?: any): AxiosPromise<UserResponseModel> {
            return localVarFp.createUserUsersPost(userModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User
         * @param {string} userKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsersUserKeyDelete(userKey: string, options?: any): AxiosPromise<DeleteUserResponseModel> {
            return localVarFp.deleteUserUsersUserKeyDelete(userKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User
         * @param {string} userKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsersUserKeyGet(userKey: string, options?: any): AxiosPromise<UserResponseModel> {
            return localVarFp.getUserUsersUserKeyGet(userKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersUsersGet(options?: any): AxiosPromise<Array<UserResponseModel>> {
            return localVarFp.listUsersUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User
         * @param {string} userKey 
         * @param {UserUpdateModel} userUpdateModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsersUserKeyPatch(userKey: string, userUpdateModel: UserUpdateModel, options?: any): AxiosPromise<UserResponseModel> {
            return localVarFp.updateUserUsersUserKeyPatch(userKey, userUpdateModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SimpleCrudApi - object-oriented interface
 * @export
 * @class SimpleCrudApi
 * @extends {BaseAPI}
 */
export class SimpleCrudApi extends BaseAPI {
    /**
     * 
     * @summary Create User
     * @param {UserModel} userModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleCrudApi
     */
    public createUserUsersPost(userModel: UserModel, options?: RawAxiosRequestConfig) {
        return SimpleCrudApiFp(this.configuration).createUserUsersPost(userModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User
     * @param {string} userKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleCrudApi
     */
    public deleteUserUsersUserKeyDelete(userKey: string, options?: RawAxiosRequestConfig) {
        return SimpleCrudApiFp(this.configuration).deleteUserUsersUserKeyDelete(userKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User
     * @param {string} userKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleCrudApi
     */
    public getUserUsersUserKeyGet(userKey: string, options?: RawAxiosRequestConfig) {
        return SimpleCrudApiFp(this.configuration).getUserUsersUserKeyGet(userKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleCrudApi
     */
    public listUsersUsersGet(options?: RawAxiosRequestConfig) {
        return SimpleCrudApiFp(this.configuration).listUsersUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User
     * @param {string} userKey 
     * @param {UserUpdateModel} userUpdateModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleCrudApi
     */
    public updateUserUsersUserKeyPatch(userKey: string, userUpdateModel: UserUpdateModel, options?: RawAxiosRequestConfig) {
        return SimpleCrudApiFp(this.configuration).updateUserUsersUserKeyPatch(userKey, userUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }
}



